---

---

<main id="main" class="content z-20 relative">
  <div
    id="bg-gradiant--content"
    class="h-[21rem] bg-gradient-to-t from-transparent to-cyan-700 z-30 rounded-[var(--border-radius--card)] absolute transition-all duration-500 w-full"
  >
  </div>
</main>

<script>
  // Convierte color hexadecimal a componentes RGB numéricos [R, G, B]
  // Ejemplo: #0e7490 → [14, 116, 144]
  const parseHexColor = (hex: string): number[] => {
    const hexWithoutHash = hex.slice(1); // Remueve el caracter #
    return hexWithoutHash.match(/.{2}/g)!.map((ch) => parseInt(ch, 16)); // Divide en pares y convierte de base 16
  };

  // Referencia al elemento del DOM y colores base
  const bgGradiantContent = document.querySelector(
    "#bg-gradiant--content"
  ) as HTMLElement | null;
  const originalColor = "#0e7490"; // Color inicial en formato HEX
  const originalColorRGB = parseHexColor(originalColor); // Color base en RGB para mejores rendimiento
  let currentColorRGB = originalColorRGB; // Trackea el color actual en formato RGB
  let animationFrameId: number | null = null; // Referencia para controlar la animación activa

  // Genera colores HEX aleatorios usando operaciones bitwise para mejor rendimiento
  const randomHexColor = (): string => {
    // (Math.random() * 0x1000000) | 0 → Optimización para Math.floor más rápido
    return `#${((Math.random() * 0x1000000) | 0).toString(16).padStart(6, "0")}`;
  };

  /**
   * Animación optimizada de cambio de color usando interpolación lineal
   * @param element - Elemento HTML a animar
   * @param startRGB - Color inicial en formato RGB [R, G, B]
   * @param endRGB - Color objetivo en formato RGB [R, G, B]
   * @param duration - Duración en milisegundos
   */
  const animateColorChange = (
    element: HTMLElement,
    startRGB: number[],
    endRGB: number[],
    duration: number
  ): void => {
    const startTime = performance.now(); // Timestamp de inicio preciso
    const deltas = endRGB.map((end, i) => end - startRGB[i]); // Pre-cálculo de diferencias entre componentes

    // Cancela animaciones previas para evitar superposiciones
    const cancelPreviousAnimation = () => {
      if (animationFrameId !== null) {
        cancelAnimationFrame(animationFrameId);
        animationFrameId = null;
      }
    };

    /**
     * Actualiza el color del elemento basado en el progreso de la animación
     * @param progress - Valor normalizado [0-1] del progreso de la animación
     */
    const updateColor = (progress: number) => {
      // Interpolación lineal por componente: start + (delta * progreso)
      const [r, g, b] = startRGB.map((start, i) =>
        Math.round(start + deltas[i] * progress)
      );

      // Construye el color HEX interpolado asegurando 2 dígitos por componente
      element.style.background = `linear-gradient(to top, transparent, #${r
        .toString(16)
        .padStart(2, "0")}${g.toString(16).padStart(2, "0")}${b
        .toString(16)
        .padStart(2, "0")})`;
    };

    /**
     * Loop de animación usando requestAnimationFrame para sincronización con refresco de pantalla
     * @param timestamp - Marca de tiempo proporcionada por requestAnimationFrame
     */
    const animate = (timestamp: number) => {
      const elapsed = timestamp - startTime; // Tiempo transcurrido
      const progress = Math.min(elapsed / duration, 1); // Progreso normalizado

      updateColor(progress); // Renderiza el frame actual

      if (progress < 1) {
        animationFrameId = requestAnimationFrame(animate); // Siguiente frame
      } else {
        currentColorRGB = endRGB; // Actualiza color final al completar
        animationFrameId = null; // Limpia referencia
      }
    };

    cancelPreviousAnimation(); // Asegura solo una animación activa
    animationFrameId = requestAnimationFrame(animate); // Inicia animación
  };

  // Eventos: Usan early return para evitar ejecuciones innecesarias
  bgGradiantContent?.addEventListener("mouseover", () => {
    if (!bgGradiantContent) return; // Valida existencia del elemento
    const newColorRGB = parseHexColor(randomHexColor());
    animateColorChange(bgGradiantContent, currentColorRGB, newColorRGB, 500);
  });

  bgGradiantContent?.addEventListener("mouseout", () => {
    if (!bgGradiantContent) return;
    animateColorChange(
      bgGradiantContent,
      currentColorRGB,
      originalColorRGB,
      500
    );
  });
</script>

<style>
  .content {
    width: 100%;
    background-color: var(--bg-dark--card);
    border-radius: var(--border-radius--card);
  }
</style>
