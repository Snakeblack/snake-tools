---

---

<main id="main" class="content z-20 relative">
  <div
    id="bg-gradiant--content"
    class="h-[21rem] bg-gradient-to-t from-black to-cyan-700 z-30 rounded-[var(--border-radius--card)] absolute transition-all duration-500 w-full"
  >
  </div>
</main>

<script>
  const bgGradiantContent = document.querySelector("#bg-gradiant--content") as HTMLElement | null;
  const originalColor = "#0e7490";
  let currentColor = originalColor;

  // Genera un color hexadecimal aleatorio
  const randomHexColor = (): string => {
    return `#${Math.floor(Math.random() * 0x1000000).toString(16).padStart(6, '0')}`;
  };

  // Anima la transición de color de un elemento HTML
  const animateColorChange = (element: HTMLElement, startColor: string, endColor: string, duration: number): void => {
    let startTime: number | null = null;

    // Función que se ejecuta en cada frame de la animación
    const step = (timestamp: number) => {
      if (!startTime) startTime = timestamp;
      const progress = Math.min((timestamp - startTime) / duration, 1); // Calcula el progreso de la animación
      const newColor = interpolateColor(startColor, endColor, progress); // Obtiene el color intermedio
      element.style.background = `linear-gradient(to top, black, ${newColor})`; // Aplica el color intermedio como fondo

      if (progress < 1) {
        requestAnimationFrame(step); // Continúa la animación
      } else {
        currentColor = endColor; // Actualiza el color actual al color final
      }
    };

    requestAnimationFrame(step); // Inicia la animación
  };

  // Calcula un color intermedio entre dos colores
  const interpolateColor = (color1: string, color2: string, factor: number): string => {
    const result = color1.slice(1).match(/.{2}/g)!.map((hex: string, i: number) => {
      return Math.round(parseInt(hex, 16) + factor * (parseInt(color2.slice(1).match(/.{2}/g)![i], 16) - parseInt(hex, 16)));
    });
    return `#${result.map((value: number) => value.toString(16).padStart(2, '0')).join('')}`;
  };

  // Evento que se dispara cuando el ratón pasa sobre el elemento
  bgGradiantContent?.addEventListener("mouseover", () => {
    const newColor = randomHexColor(); // Genera un nuevo color aleatorio
    animateColorChange(bgGradiantContent!, currentColor, newColor, 500); // Anima la transición al nuevo color
  });

  // Evento que se dispara cuando el ratón sale del elemento
  bgGradiantContent?.addEventListener("mouseout", () => {
    animateColorChange(bgGradiantContent!, currentColor, originalColor, 500); // Anima la transición al color original
  });
</script>

<style>
  .content {
    width: 100%;
    background-color: var(--bg-dark--card);
    border-radius: var(--border-radius--card);
  }
</style>
